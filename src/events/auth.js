const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const { getConnection, sql } = require("../config/Conecction_SQL_Server");

module.exports = (io, socket) => {
  console.log('üìå Evento WebSocket "auth" registrado');

  // üîπ Evento para REGISTRAR un usuario
  socket.on("register", async ({ nombre, email, password }) => {
    try {
      console.log('üìå Evento "register" recibido:', email);

      const pool = await getConnection();

      // üìå Verificar si el usuario ya existe
      const userExists = await pool
        .request()
        .input("Email", sql.NVarChar, email)
        .query("SELECT * FROM Usuarios WHERE Email = @Email");

      if (userExists.recordset.length > 0) {
        console.log("‚ùå El usuario ya existe");
        return socket.emit("register_error", "El email ya est√° registrado");
      }

      // üìå Hashear la contrase√±a antes de guardarla en la BD
      const hashedPassword = await bcrypt.hash(password, 10);
      console.log("üîê Contrase√±a encriptada:", hashedPassword);

      // üìå Insertar el nuevo usuario en la BD
      await pool
        .request()
        .input("Nombre", sql.NVarChar, nombre)
        .input("Email", sql.NVarChar, email)
        .input("Password", sql.NVarChar, hashedPassword)
        .query(
          "INSERT INTO Usuarios (Nombre, Email, Password, FechaRegistro) VALUES (@Nombre, @Email, @Password, GETDATE())"
        );

      console.log("‚úÖ Usuario registrado correctamente");
      socket.emit("register_success", "Usuario registrado con √©xito");
    } catch (err) {
      console.error("‚ùå Error en registro:", err);
      socket.emit("register_error", "Error en el servidor");
    }
  });

  // üîπ Evento para INICIAR SESI√ìN (manejo de sesiones)
  socket.on("login", async ({ email, password }) => {
    try {
      console.log('üìå Evento "login" recibido:', email);

      const pool = await getConnection();
      const result = await pool
        .request()
        .input("Email", sql.NVarChar, email)
        .query("SELECT * FROM Usuarios WHERE Email = @Email");

      if (result.recordset.length === 0) {
        console.log("‚ùå Usuario no encontrado");
        return socket.emit("login_error", "Usuario o contrase√±a incorrectos");
      }

      const user = result.recordset[0];

      // üìå Mostrar la contrase√±a almacenada en la base de datos
      console.log(
        "üîê Contrase√±a almacenada en BD (hash bcrypt):",
        user.Password
      );

      // Comparar la contrase√±a ingresada con la almacenada
      const isMatch = await bcrypt.compare(password, user.Password);
      console.log("üìå Coincidencia de contrase√±a:", isMatch);

      if (!isMatch) {
        console.log("‚ùå Contrase√±a incorrecta");
        return socket.emit("login_error", "Usuario o contrase√±a incorrectos");
      }

      // üìå Generar token JWT
      const token = jwt.sign(
        { id: user.id, email: user.Email },
        process.env.JWT_SECRET || "mi_clave_secreta",
        { expiresIn: "1h" }
      );

      // üìå Ejecutar el procedimiento almacenado para insertar la sesi√≥n
      const sessionResult = await pool
        .request()
        .input("UserId", sql.Int, user.Id)
        .input("Token", sql.NVarChar, token)
        .input("DuracionHoras", sql.Int, 6) // Cambia el valor si necesitas m√°s o menos horas
        .execute("InsertarSesion");

      // üìå Obtener la fecha de expiraci√≥n de la respuesta del procedimiento almacenado
      const expiresAt = sessionResult.recordset[0]?.expires_at;

      console.log("‚úÖ Login exitoso, enviando token...");
      socket.emit("login_success", { token, expiresAt });
    } catch (err) {
      console.error("‚ùå Error en login:", err);
      socket.emit("login_error", "Error en el servidor");
    }
  });

  // üîπ Evento para VALIDAR SESI√ìN
  socket.on("validate_session", async ({ token }) => {
    try {
      console.log(`üìå Validando sesi√≥n para el token: ${token}`);

      const pool = await getConnection();
      const result = await pool
        .request()
        .input("Token", sql.NVarChar, token)
        .query("SELECT * FROM Sessions WHERE token = @Token AND is_valid = 1");

      if (result.recordset.length === 0) {
        console.log("‚ùå Sesi√≥n no v√°lida o expirada");
        return socket.emit("session_invalid", "Sesi√≥n no v√°lida o expirada");
      }

      console.log("‚úÖ Sesi√≥n v√°lida");
      socket.emit("session_valid", "Sesi√≥n v√°lida");
    } catch (err) {
      console.error("‚ùå Error al validar sesi√≥n:", err);
      socket.emit("session_error", "Error en el servidor");
    }
  });

  // üîπ Evento para CERRAR SESI√ìN
  socket.on("logout", async ({ token }) => {
    try {
      console.log(`üìå Cerrando sesi√≥n con token: ${token}`);

      const pool = await getConnection();
      await pool
        .request()
        .input("Token", sql.NVarChar, token)
        .query("UPDATE Sessions SET is_valid = 0 WHERE token = @Token");

      console.log("‚úÖ Sesi√≥n cerrada correctamente");
      socket.emit("logout_success", "Sesi√≥n cerrada correctamente");
    } catch (err) {
      console.error("‚ùå Error en logout:", err);
      socket.emit("logout_error", "Error al cerrar sesi√≥n");
    }
  });
};